// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Src.Connection;

#nullable disable

namespace notaFiscal_api.Migrations
{
    [DbContext(typeof(NotaDbContext))]
    [Migration("20231220041150_03_AdicionarRelacaoFornecedorProduto")]
    partial class _03_AdicionarRelacaoFornecedorProduto
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Src.Api.Domain.Models.ClienteModels.ClienteModel", b =>
                {
                    b.Property<string>("Cpf")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Cpf");

                    b.ToTable("cliente");
                });

            modelBuilder.Entity("Src.Api.Domain.Models.FornecedorModels.FornecedorModel", b =>
                {
                    b.Property<string>("Cnpj")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("IdNota")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Cnpj");

                    b.HasIndex("IdNota");

                    b.ToTable("fornecedor");
                });

            modelBuilder.Entity("Src.Api.Domain.Models.NotaFiscalModels.NotaFiscalModel", b =>
                {
                    b.Property<string>("IdNota")
                        .HasColumnType("text");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("character varying(15)");

                    b.Property<string>("ValorTotal")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.HasKey("IdNota");

                    b.HasIndex("Cpf");

                    b.ToTable("notaFiscal");
                });

            modelBuilder.Entity("Src.Api.Domain.Models.ProdutoModels.ProdutoModel", b =>
                {
                    b.Property<string>("IdProduto")
                        .HasColumnType("text");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.HasKey("IdProduto");

                    b.HasIndex("Cnpj");

                    b.ToTable("produto");
                });

            modelBuilder.Entity("Src.Api.Domain.Models.FornecedorModels.FornecedorModel", b =>
                {
                    b.HasOne("Src.Api.Domain.Models.NotaFiscalModels.NotaFiscalModel", "NotaFiscal")
                        .WithMany("Fornecedores")
                        .HasForeignKey("IdNota")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotaFiscal");
                });

            modelBuilder.Entity("Src.Api.Domain.Models.NotaFiscalModels.NotaFiscalModel", b =>
                {
                    b.HasOne("Src.Api.Domain.Models.ClienteModels.ClienteModel", "Cliente")
                        .WithMany("NotasFiscais")
                        .HasForeignKey("Cpf")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Src.Api.Domain.Models.ProdutoModels.ProdutoModel", b =>
                {
                    b.HasOne("Src.Api.Domain.Models.FornecedorModels.FornecedorModel", "Fornecedor")
                        .WithMany("Produtos")
                        .HasForeignKey("Cnpj")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("Src.Api.Domain.Models.ClienteModels.ClienteModel", b =>
                {
                    b.Navigation("NotasFiscais");
                });

            modelBuilder.Entity("Src.Api.Domain.Models.FornecedorModels.FornecedorModel", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("Src.Api.Domain.Models.NotaFiscalModels.NotaFiscalModel", b =>
                {
                    b.Navigation("Fornecedores");
                });
#pragma warning restore 612, 618
        }
    }
}
